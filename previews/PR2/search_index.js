var documenterSearchIndex = {"docs":
[{"location":"api/#API-1","page":"API","title":"API","text":"","category":"section"},{"location":"api/#Public-1","page":"API","title":"Public","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [WebDriver]\nPrivate = false","category":"page"},{"location":"api/#WebDriver.WebDriver","page":"API","title":"WebDriver.WebDriver","text":"WebDriver\n\nA binding for the WebDriver and JSON Wire Protocol for the Julia programing language compatible with the Selenium WebDriver.\n\nRepository\n\nExample\n\njulia> using WebDriver\n\n\n\n\n\n","category":"module"},{"location":"api/#WebDriver.Capabilities","page":"API","title":"WebDriver.Capabilities","text":"Capabilities(browserName::AbstractString;\n             browserVersion::AbstractString = \"\",\n             platformName::AbstractString = \"\",\n             acceptInsecureCerts::Union{Nothing, Bool} = nothing,\n             pageLoadStrategy::AbstractString = \"\",\n             proxy::Union{Nothing, Proxy} = nothing,\n             setWindowRect::Union{Nothing, Bool} = nothing,\n             timeouts::Timeouts = Timeouts(),\n             strictFileInteractability::Union{Nothing, Bool} = nothing,\n             unhandledPromptBehavior::AbstractString = \"dismiss and notify\"\n             )::Capabilities\n\nAccording to W3C.\n\nExample\n\njulia> capabilities = Capabilities(\"chrome\")\nRemote WebDriver Capabilities\nbrowserName: chrome\n\n\n\n\n\n","category":"type"},{"location":"api/#WebDriver.Cookie","page":"API","title":"WebDriver.Cookie","text":"Cookie(obj)::Cookie\nCookie(name::AbstractString, value;\n       path::AbstractString = \"/\",\n       domain::Union{Nothing, AbstractString} = nothing,\n       secure::Bool = false,\n       httpOnly::Bool = false,\n       expiry::Union{Nothing, Integer, DateTime} = nothing)::Cookie\n\nA cookie per W3C.\n\n\n\n\n\n","category":"type"},{"location":"api/#WebDriver.Element","page":"API","title":"WebDriver.Element","text":"Element(session::Session, location_strategy::AbstractString, value::AbstractString)::Element\nElement(element::Element, location_strategy::AbstractString, value::AbstractString)::Element\n\nFinds an element based on a session or element. May use a location strategy from \"css selector\", \"link text\", \"partial link text\", \"tag name\" or \"xpath\".\n\n\n\n\n\n","category":"type"},{"location":"api/#WebDriver.Proxy","page":"API","title":"WebDriver.Proxy","text":"Proxy(proxyType::AbstractString;\n      proxyAutoconfigUrl::Union{Nothing, AbstractString} = nothing,\n      ftpProxy::Union{Nothing, AbstractString} = nothing,\n      httpProxy::Union{Nothing, AbstractString} = nothing,\n      noProxy::Union{Nothing, AbstractVector{<:AbstractString}} = nothing,\n      sslProxy::Union{Nothing, AbstractString} = nothing,\n      socksProxy::Union{Nothing, AbstractString} = nothing,\n      socksVersion::Union{Nothing, Integer} = nothing)::Proxy\n\nThe proxy configuration capability is a JSON Object nested within the primary capabilities. According to the W3C.\n\n\n\n\n\n","category":"type"},{"location":"api/#WebDriver.RemoteWebDriver","page":"API","title":"WebDriver.RemoteWebDriver","text":"RemoteWebDriver(capabilities::Capabilities;\n                host::AbstractString = \"localhost\",\n                port::Integer = 4444,\n                path::AbstractString = \"/wd/hub\",\n\t\t\t\tkwargs...)::RemoteWebDriver\n\nSpecifies a remote web driver according to W3C.\n\njulia> capabilities = Capabilities(\"chrome\")\nRemote WebDriver Capabilities\nbrowserName: chrome\njulia> wd = RemoteWebDriver(capabilities, host = ENV[\"WEBDRIVER_HOST\"], port = parse(Int, ENV[\"WEBDRIVER_PORT\"]))\nRemote WebDriver\njulia> status(wd) # Ready to accept new sessions?\ntrue\n\n\n\n\n\n","category":"type"},{"location":"api/#WebDriver.Session","page":"API","title":"WebDriver.Session","text":"Session\n\nThis is a web session.\n\njulia> capabilities = Capabilities(\"chrome\")\nRemote WebDriver Capabilities\nbrowserName: chrome\njulia> wd = RemoteWebDriver(capabilities, host = ENV[\"WEBDRIVER_HOST\"], port = parse(Int, ENV[\"WEBDRIVER_PORT\"]))\nRemote WebDriver\njulia> session = Session(wd)\nSession\njulia> isa(session, Session)\ntrue\njulia> delete!(session);\n\n\n\n\n\n\n","category":"type"},{"location":"api/#WebDriver.Timeouts","page":"API","title":"WebDriver.Timeouts","text":"Timeouts\n\nAccording to the W3C.\n\njulia> Timeouts(script = 50_000, pageLoad = 100_000, implicit = 5)\nSession Timeouts -- script: 50000, pageLoad: 100000, implicit: 5\n\n\n\n\n\n","category":"type"},{"location":"api/#WebDriver.maximize!-Tuple{Session}","page":"API","title":"WebDriver.maximize!","text":"maximize!(session::Session; window::AbstractString = \"current\")::Dict{String,Int}\n\nMaximize the window based on window handle (defaults to current). Returns Rect oof window.\n\nnote: Note\n\n\nThis command is implemented using the JSON Wire Protocol.\n\n\n\n\n\n","category":"method"},{"location":"api/#WebDriver.moveto!-Tuple{Session}","page":"API","title":"WebDriver.moveto!","text":"moveto!(session::Session; x::Integer = 0, y::Integer = 0)\nmoveto!(element::Element; x::Integer = 0, y::Integer = 0)\n\n\n\n\n\n","category":"method"},{"location":"api/#WebDriver.rect","page":"API","title":"WebDriver.rect","text":"rect(session::Session; window::AbstractString = \"current\")::NamedTuple\n\nReturn window's dimensions in pixels.\n\n\n\n\n\n","category":"function"},{"location":"api/#WebDriver.rect!-Tuple{Session}","page":"API","title":"WebDriver.rect!","text":"rect!(session::Session;\n      window::AbstractString = \"current\",\n      width::Union{Nothing, Real} = nothing,\n      height::Union{Nothing, Real} = nothing\n     )::NamedTuple\n\nSets the window's dimensions in pixels.\n\n\n\n\n\n","category":"method"},{"location":"api/#WebDriver.rect-Tuple{Element}","page":"API","title":"WebDriver.rect","text":"rect(element::Element)::NamedTuple\n\nReturn the size of the element in pixels.\n\n\n\n\n\n","category":"method"},{"location":"api/#WebDriver.script!-Tuple{Session,AbstractString,Vararg{Any,N} where N}","page":"API","title":"WebDriver.script!","text":"script!(session::Session, script::AbstractString, args...; async::Bool = false)\n\nExecutes JavaScript (sync / async)\n\nnote: Note\nThis command uses the JSON Wire Protocol instead of the current W3c WebDriver API.\n\n\n\n\n\n","category":"method"},{"location":"api/#WebDriver.status-Tuple{RemoteWebDriver}","page":"API","title":"WebDriver.status","text":"status(wd::WebDriver)::Bool\n\nReturns true if the server is running and ready to accept new sessions.\n\n\n\n\n\n","category":"method"},{"location":"api/#WebDriver.timeouts-Tuple{Session}","page":"API","title":"WebDriver.timeouts","text":"timeouts(session::Session)\n\nGet the timeouts according to webdriver2. Currently not supported by Selenium.\n\n\n\n\n\n","category":"method"},{"location":"api/#Private-1","page":"API","title":"Private","text":"","category":"section"},{"location":"api/#","page":"API","title":"API","text":"Modules = [WebDriver]\nPublic = false","category":"page"},{"location":"api/#Base.delete!-Tuple{Session,AbstractString}","page":"API","title":"Base.delete!","text":"delete!(session::Session, cookie::AbstractString)\n\nIf cookie = \"\", delete all cookies. Otherwise, delete cookie matching the \"cookie\" name.\n\n\n\n\n\n","category":"method"},{"location":"api/#Base.delete!-Tuple{Session}","page":"API","title":"Base.delete!","text":"delete!(session::Session)\n\nDeletes the session from the Remote Driver.\n\n\n\n\n\n","category":"method"},{"location":"api/#WebDriver.actions!-Tuple{Session,AbstractArray{T,1} where T}","page":"API","title":"WebDriver.actions!","text":"actions!(session::Session, actions::AbstractVector)\n\n\n\n\n\n","category":"method"},{"location":"api/#WebDriver.sessions-Tuple{RemoteWebDriver}","page":"API","title":"WebDriver.sessions","text":"sessions(wd::RemoteWebDriver)\n\nReturns a list of the currently active sessions.\n\nnote: Note\nThis is a JSON Wire Protocol functionality.\n\n\n\n\n\n","category":"method"},{"location":"#WebDriver.jl-1","page":"Home","title":"WebDriver.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Documentation for WebDriver.jl","category":"page"}]
}
